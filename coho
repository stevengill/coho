#!/usr/bin/env node
VERSION = process.argv[2]
var util           = require('util')
,   exec           = require('child_process').exec
,   fs			   = require('fs')
,   ios            = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-ios.git'
,   blackberry     = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-blackberry-webworks.git'
,   android        = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-android.git'
,   windows        = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-wp7.git'
,   webos          = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-webos.git'
,   bada       	   = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-bada.git'
,   docs      	   = 'https://git-wip-us.apache.org/repos/asf/incubator-cordova-docs.git'
,	iosdir	       = 'incubator-cordova-ios'
,	blackberrydir  = 'incubator-cordova-blackberry-webworks'
,	androiddir	   = 'incubator-cordova-android'
,	windowsdir	   = 'incubator-cordova-wp7'
,	webosdir	   = 'incubator-cordova-webos'
,	badadir	       = 'incubator-cordova-bada'
,   docsdir        = 'incubator-cordova-docs'
,   tempRepoDir    = 'temp/repositories'
,   iosReleaseBinDir = ' ../../../release/bin/ios'
, blackberryReleaseBinDir = '../../../release/bin/blackberry'
, androidReleaseBinDir = '../../release/bin/android'
, androidReleaseLicense = '../../release/bin/android/LICENSE'
, androidReleaseVersion = '../../release/bin/android/VERSION'
, windowsReleaseBinDir = '../../release/bin/windows'
, webosReleaseBinDir = '../../release/bin/webos'
, badaReleaseBinDir = '../../release/bin/bada'
, releaseDocDir = '../../release/doc'
, releaseBinDir = '../release/bin'
, releaseSrcDir = '../release/src'
, oldVer = process.argv[3];

var commandQueue = [],
    child;

function queueCommand(cmd) {
    commandQueue.push(cmd);
}

// Run through all queued commands in a synchronous manner.
// If there's an error it will stop executing commands.
// The callback parameter will fire once all commands have completed.
function executeCommands(callback) {
    var cmd = commandQueue.shift();
    if (cmd) {
		child = exec(cmd, function(err, stdout, stderr) {
        	if (err !== null) {
        		console.log('ERROR!' + err);
          		util.puts(stderr);
		  		executeCommands(callback);
        	} else {
          		util.puts(stdout);
          		executeCommands(callback);
        	}
		});
    	if (commandQueue.length === 0) {
    		// Attach the callback to the child since this is the last command.
    		child.on('exit', callback);
   		}
    } else {
    	console.log('All done');
    }
}

queueCommand("rm -rf temp && mkdir temp && cd temp && mkdir repositories && mkdir release");
queueCommand("cd temp/release && mkdir bin && mkdir src && cd bin && mkdir ios && mkdir android && mkdir blackberry && mkdir windows && mkdir webos && mkdir symbian && mkdir bada");

//ios
queueCommand("cd " + tempRepoDir + " && git clone "+ios+" && cd "+iosdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd " + tempRepoDir + " && cp -r " + iosdir + " " + releaseSrcDir);
queueCommand("cd " + tempRepoDir + "/"+iosdir+" && make");
queueCommand("cd " + tempRepoDir + "/"+iosdir+"/dist && cp -r Cordova-"+VERSION+".dmg " + iosReleaseBinDir + " && cp -r Cordova-"+VERSION+".dmg.SHA1 " + iosReleaseBinDir);
queueCommand("cd " + tempRepoDir + "/"+iosdir+" && cp NOTICE ../../release/bin/ios");

//blackberry
queueCommand("cd " + tempRepoDir + " && git clone "+blackberry+" && cd "+blackberrydir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd " + tempRepoDir + " && cp -r " + blackberrydir + " " + releaseSrcDir);
queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && ant dist");
queueCommand("cd " + tempRepoDir + "/"+blackberrydir+"/dist && cp -r ./* " + blackberryReleaseBinDir);
queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && cp NOTICE ../../release/bin/blackberry");

//android
queueCommand("cd " + tempRepoDir + " && git clone "+android+" && cd "+androiddir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd " + tempRepoDir + " && cp -r " + androiddir + " " + releaseSrcDir);
queueCommand("cd " + tempRepoDir + "/"+androiddir+" && cp LICENSE " + androidReleaseLicense + " && cp VERSION " + androidReleaseVersion + " && cp README.md " + androidReleaseBinDir + " && cp NOTICE " + androidReleaseBinDir);
queueCommand("cd " + tempRepoDir + "/"+androiddir+" && ant clean");
queueCommand("cd " + tempRepoDir + "/"+androiddir+" && ./bin/create");
queueCommand("cd " + tempRepoDir + "/"+androiddir+" && cp -rp example " + androidReleaseBinDir + "/example");
queueCommand("cd " + tempRepoDir + "/"+androiddir+"/example && cp libs/cordova-"+VERSION+".jar ../" + androidReleaseBinDir);
queueCommand("cd " + tempRepoDir + "/"+androiddir+"/example && cp assets/www/cordova-"+VERSION+".js ../" + androidReleaseBinDir);
queueCommand("cd " + tempRepoDir + "/"+androiddir+"/example && cp -r res/xml ../" + androidReleaseBinDir);

//windows phone
queueCommand("cd " + tempRepoDir + " && git clone "+windows+" && cd "+windowsdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd " + tempRepoDir + " && cp -r " + windowsdir + " " + releaseSrcDir);
queueCommand("cd " + tempRepoDir + "/"+windowsdir+" && cp -r ./* " + windowsReleaseBinDir);

//webos
queueCommand("cd " + tempRepoDir + " && git clone "+webos+" && cd "+webosdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd " + tempRepoDir + " && cp -r " + webosdir + " " + releaseSrcDir);
queueCommand("cd " + tempRepoDir + "/"+webosdir+" && cp -r ./* " + webosReleaseBinDir);

//bada
queueCommand("cd " + tempRepoDir + " && git clone "+bada+" && cd "+badadir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd " + tempRepoDir + " && cp -r " + badadir + " " + releaseSrcDir);
queueCommand("cd " + tempRepoDir + "/"+badadir+" && cp -r ./* " + badaReleaseBinDir);

//docs
queueCommand("cd " + tempRepoDir + " && git clone "+docs+" && cd "+docsdir+" && git fetch --tags && git checkout "+VERSION);
queueCommand("cd " + tempRepoDir + "/"+docsdir+" && ./bin/generate && cp -r public/en/"+VERSION+" " + releaseDocDir);

//symbian
fs.writeFile('depreciate.txt', 'PhoneGap-Symbian is being depreciated. You can find the last available code at https://github.com/callback/callback-symbian.', function (err) {
  if (err) throw err;
});

queueCommand("mv depreciate.txt temp/release/bin/symbian/depreciate.txt")

// keys into top level directory
queueCommand("echo 'Moving KEYS file to release'");
queueCommand("cp KEYS temp/release/KEYS")

// notice, license, readme, disclaimer file to be put into official release artifact
queueCommand("echo 'Moving notice, license, readme, and disclaimer files to release artifact'");
queueCommand("cp bin/README.md temp/release/src/README.MD")
queueCommand("cp bin/NOTICE temp/release/src/NOTICE");
queueCommand("cp bin/LICENSE temp/release/src/LICENSE");
queueCommand("cp bin/DISCLAIMER temp/release/src/DISCLAIMER");

if (oldVer != undefined){
	queueCommand("cd temp/release/ && touch changelog && echo 'ChangeLog' > changelog")
	queueCommand("echo 'ios' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+iosdir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'blackberry' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+blackberrydir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'android' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+androiddir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'windows' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+windowsdir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'webos' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+webosdir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
	queueCommand("echo 'bada' >> temp/release/changelog")
	queueCommand("cd " + tempRepoDir + "/"+badadir+" && git shortlog --no-merges "+oldVer+".."+VERSION+" >> ../../release/changelog")
}

// zip and sign bin/src/doc folders
var cordovaBinZip = "cordova-"+VERSION+"-incubating-bin.zip";
var cordovaBinAsc = cordovaBinZip+".asc";
var cordovaBinMd5 = cordovaBinZip+".md5";
var cordovaBinSha = cordovaBinZip+".sha";

var cordovaDocZip = "cordova-"+VERSION+"-incubating-doc.zip";
var cordovaDocAsc = cordovaDocZip+".asc";
var cordovaDocMd5 = cordovaDocZip+".md5";
var cordovaDocSha = cordovaDocZip+".sha";

var cordovaSrcZip = "cordova-"+VERSION+"-incubating-src.zip";
var cordovaSrcAsc = cordovaSrcZip+".asc";
var cordovaSrcMd5 = cordovaSrcZip+".md5";
var cordovaSrcSha = cordovaSrcZip+".sha";

// remove git files before we zip
queueCommand("echo 'Cleaning up .git files from repositories before zipping em'");
queueCommand("cd temp/release/src && find `pwd` -name .git -type d -print0 | xargs -0 rm -r");
queueCommand("cd temp/release/src && find `pwd` -name .git* -type f -print0 | xargs -0 rm -r");

queueCommand("echo 'Zipping and signing bin'");
queueCommand("cd temp/release/bin && zip -rq "+ cordovaBinZip +" * && gpg --armor --output "+cordovaBinAsc+" --detach-sig "+cordovaBinZip+" && gpg --print-md MD5 "+cordovaBinMd5+" > " + cordovaBinMd5 +" && gpg --print-md SHA512 " + cordovaBinZip + " > " + cordovaBinSha);

queueCommand("echo 'Zipping and signing doc'");
queueCommand("cd temp/release/doc && zip -rq "+ cordovaDocZip +" * && gpg --armor --output "+cordovaDocAsc+" --detach-sig "+cordovaDocZip+" && gpg --print-md MD5 "+cordovaDocZip+" > " + cordovaDocMd5 +" && gpg --print-md SHA512 " + cordovaDocZip + " > " + cordovaDocSha);

queueCommand("echo 'Zipping and signing src'");
queueCommand("cd temp/release/src && zip -rq "+ cordovaSrcZip +" * && gpg --armor --output "+cordovaSrcAsc+" --detach-sig "+cordovaSrcZip+" && gpg --print-md MD5 "+cordovaSrcZip+" > " + cordovaSrcMd5 +" && gpg --print-md SHA512 " + cordovaSrcZip + " > " + cordovaSrcSha);

// clean up
queueCommand("echo 'Final clean up'");
queueCommand("cd temp/release/bin && ls | grep -v "+cordovaBinZip+" | xargs rm -r");
queueCommand("cd temp/release/doc && ls | grep -v "+cordovaDocZip+" | xargs rm -r");
queueCommand("cd temp/release/src && ls | grep -v "+cordovaSrcZip+" | xargs rm -r");
executeCommands(function(){
	exec("say DONE", function(e, stdout, stderr) {
	});
});
